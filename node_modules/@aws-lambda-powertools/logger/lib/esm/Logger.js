var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Logger_buffer, _Logger_isInitialized;
import { Utility } from '@aws-lambda-powertools/commons';
import merge from 'lodash.merge';
import { Console } from 'node:console';
import { randomInt } from 'node:crypto';
import { EnvironmentVariablesService } from './config/EnvironmentVariablesService.js';
import { LogJsonIndent } from './constants.js';
import { PowertoolsLogFormatter } from './formatter/PowertoolsLogFormatter.js';
/**
 * ## Intro
 * The Logger utility provides an opinionated logger with output structured as JSON.
 *
 * ## Key features
 *  * Capture key fields from Lambda context, cold start and structures logging output as JSON
 *  * Log Lambda context when instructed (disabled by default)
 *  * Log sampling prints all logs for a percentage of invocations (disabled by default)
 *  * Append additional keys to structured log at any point in time
 *
 * ## Usage
 *
 * For more usage examples, see [our documentation](https://docs.powertools.aws.dev/lambda/typescript/latest/core/logger/).
 *
 * ### Basic usage
 *
 * @example
 * ```typescript
 * import { Logger } from '@aws-lambda-powertools/logger';
 *
 * // Logger parameters fetched from the environment variables:
 * const logger = new Logger();
 * ```
 *
 * ### Functions usage with middleware
 *
 * If you use function-based Lambda handlers you can use the [injectLambdaContext()](#injectLambdaContext)
 * middy middleware to automatically add context to your Lambda logs.
 *
 * @example
 * ```typescript
 * import { Logger } from '@aws-lambda-powertools/logger';
 * import { injectLambdaContext } from '@aws-lambda-powertools/logger/middleware';
 * import middy from '@middy/core';
 *
 * const logger = new Logger();
 *
 * const lambdaHandler = async (_event: unknown, _context: unknown) => {
 *     logger.info('This is an INFO log with some context');
 * };
 *
 * export const handler = middy(lambdaHandler).use(injectLambdaContext(logger));
 * ```
 *
 * ### Object oriented usage with decorators
 *
 * If instead you use TypeScript classes to wrap your Lambda handler you can use the [@logger.injectLambdaContext()](./_aws_lambda_powertools_logger.Logger.html#injectLambdaContext) decorator.
 *
 * @example
 * ```typescript
 * import { Logger } from '@aws-lambda-powertools/logger';
 * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';
 *
 * const logger = new Logger();
 *
 * class Lambda implements LambdaInterface {
 *     // Decorate your handler class method
 *     ‚Å£@logger.injectLambdaContext()
 *     public async handler(_event: unknown, _context: unknown): Promise<void> {
 *         logger.info('This is an INFO log with some context');
 *     }
 * }
 *
 * const handlerClass = new Lambda();
 * export const handler = handlerClass.handler.bind(handlerClass);
 * ```
 *
 * ### Functions usage with manual instrumentation
 *
 * If you prefer to manually instrument your Lambda handler you can use the methods in the Logger class directly.
 *
 * @example
 * ```typescript
 * import { Logger } from '@aws-lambda-powertools/logger';
 *
 * const logger = new Logger();
 *
 * export const handler = async (_event, context) => {
 *     logger.addContext(context);
 *     logger.info('This is an INFO log with some context');
 * };
 * ```
 *
 * @class
 * @implements {ClassThatLogs}
 * @see https://docs.powertools.aws.dev/lambda/typescript/latest/core/logger/
 */
class Logger extends Utility {
    /**
     * Log level used by the current instance of Logger.
     *
     * Returns the log level as a number. The higher the number, the less verbose the logs.
     * To get the log level name, use the {@link getLevelName()} method.
     */
    get level() {
        return this.logLevel;
    }
    /**
     * It initializes the Logger class with an optional set of options (settings).
     * *
     * @param {ConstructorOptions} options
     */
    constructor(options = {}) {
        super();
        /**
         * Environment variables service instance used to fetch environment variables.
         */
        this.envVarsService = new EnvironmentVariablesService();
        /**
         * Whether to print the Lambda invocation event in the logs.
         */
        this.logEvent = false;
        /**
         * JSON indentation used to format the logs.
         */
        this.logIndentation = LogJsonIndent.COMPACT;
        /**
         * Log level used internally by the current instance of Logger.
         */
        this.logLevel = 12;
        /**
         * Log level thresholds used internally by the current instance of Logger.
         *
         * The levels are in ascending order from the most verbose to the least verbose (no logs).
         */
        this.logLevelThresholds = {
            DEBUG: 8,
            INFO: 12,
            WARN: 16,
            ERROR: 20,
            CRITICAL: 24,
            SILENT: 28,
        };
        /**
         * Persistent log attributes that will be logged in all log items.
         */
        this.persistentLogAttributes = {};
        /**
         * Standard attributes managed by Powertools that will be logged in all log items.
         */
        this.powertoolsLogData = {};
        /**
         * Buffer used to store logs until the logger is initialized.
         *
         * Sometimes we need to log warnings before the logger is fully initialized, however we can't log them
         * immediately because the logger is not ready yet. This buffer stores those logs until the logger is ready.
         */
        _Logger_buffer.set(this, []);
        /**
         * Flag used to determine if the logger is initialized.
         */
        _Logger_isInitialized.set(this, false);
        const { customConfigService, ...rest } = options;
        this.setCustomConfigService(customConfigService);
        // all logs are buffered until the logger is initialized
        this.setOptions(rest);
        __classPrivateFieldSet(this, _Logger_isInitialized, true, "f");
        for (const [level, log] of __classPrivateFieldGet(this, _Logger_buffer, "f")) {
            // we call the method directly and create the log item just in time
            this.printLog(level, this.createAndPopulateLogItem(...log));
        }
        __classPrivateFieldSet(this, _Logger_buffer, [], "f");
    }
    /**
     * It adds the current Lambda function's invocation context data to the powertoolLogData property of the instance.
     * This context data will be part of all printed log items.
     *
     * @param {Context} context
     * @returns {void}
     */
    addContext(context) {
        this.addToPowertoolsLogData({
            lambdaContext: {
                invokedFunctionArn: context.invokedFunctionArn,
                coldStart: this.getColdStart(),
                awsRequestId: context.awsRequestId,
                memoryLimitInMB: context.memoryLimitInMB,
                functionName: context.functionName,
                functionVersion: context.functionVersion,
            },
        });
    }
    /**
     * It adds the given attributes (key-value pairs) to all log items generated by this Logger instance.
     *
     * @param {LogAttributes} attributes
     * @returns {void}
     */
    addPersistentLogAttributes(attributes) {
        merge(this.persistentLogAttributes, attributes);
    }
    /**
     * Alias for addPersistentLogAttributes.
     *
     * @param {LogAttributes} attributes
     * @returns {void}
     */
    appendKeys(attributes) {
        this.addPersistentLogAttributes(attributes);
    }
    /**
     * It creates a separate Logger instance, identical to the current one
     * It's possible to overwrite the new instance options by passing them.
     *
     * @param {ConstructorOptions} options
     * @returns {Logger}
     */
    createChild(options = {}) {
        const childLogger = this.createLogger(
        // Merge parent logger options with options passed to createChild,
        // the latter having precedence.
        merge({}, {
            logLevel: this.getLevelName(),
            serviceName: this.powertoolsLogData.serviceName,
            sampleRateValue: this.powertoolsLogData.sampleRateValue,
            logFormatter: this.getLogFormatter(),
            customConfigService: this.getCustomConfigService(),
            environment: this.powertoolsLogData.environment,
            persistentLogAttributes: this.persistentLogAttributes,
        }, options));
        if (this.powertoolsLogData.lambdaContext)
            childLogger.addContext(this.powertoolsLogData.lambdaContext);
        return childLogger;
    }
    /**
     * It prints a log item with level CRITICAL.
     *
     * @param {LogItemMessage} input
     * @param {Error | LogAttributes | string} extraInput
     */
    critical(input, ...extraInput) {
        this.processLogItem(24, input, extraInput);
    }
    /**
     * It prints a log item with level DEBUG.
     *
     * @param {LogItemMessage} input
     * @param {Error | LogAttributes | string} extraInput
     * @returns {void}
     */
    debug(input, ...extraInput) {
        this.processLogItem(8, input, extraInput);
    }
    /**
     * It prints a log item with level ERROR.
     *
     * @param {LogItemMessage} input
     * @param {Error | LogAttributes | string} extraInput
     * @returns {void}
     */
    error(input, ...extraInput) {
        this.processLogItem(20, input, extraInput);
    }
    /**
     * Get the log level name of the current instance of Logger.
     *
     * It returns the log level name, i.e. `INFO`, `DEBUG`, etc.
     * To get the log level as a number, use the {@link Logger.level} property.
     *
     * @returns {Uppercase<LogLevel>} The log level name.
     */
    getLevelName() {
        return this.getLogLevelNameFromNumber(this.logLevel);
    }
    /**
     * It returns a boolean value. True means that the Lambda invocation events
     * are printed in the logs.
     *
     * @returns {boolean}
     */
    getLogEvent() {
        return this.logEvent;
    }
    /**
     * It returns the persistent log attributes, which are the attributes
     * that will be logged in all log items.
     *
     * @private
     * @returns {LogAttributes}
     */
    getPersistentLogAttributes() {
        return this.persistentLogAttributes;
    }
    /**
     * It prints a log item with level INFO.
     *
     * @param {LogItemMessage} input
     * @param {Error | LogAttributes | string} extraInput
     * @returns {void}
     */
    info(input, ...extraInput) {
        this.processLogItem(12, input, extraInput);
    }
    /**
     * Method decorator that adds the current Lambda function context as extra
     * information in all log items.
     *
     * The decorator can be used only when attached to a Lambda function handler which
     * is written as method of a class, and should be declared just before the handler declaration.
     *
     * Note: Currently TypeScript only supports decorators on classes and methods. If you are using the
     * function syntax, you should use the middleware instead.
     *
     * @example
     * ```typescript
     * import { Logger } from '@aws-lambda-powertools/logger';
     * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';
     *
     * const logger = new Logger();
     *
     * class Lambda implements LambdaInterface {
     *     // Decorate your handler class method
     *     ‚Å£@logger.injectLambdaContext()
     *     public async handler(_event: unknown, _context: unknown): Promise<void> {
     *         logger.info('This is an INFO log with some context');
     *     }
     * }
     *
     * const handlerClass = new Lambda();
     * export const handler = handlerClass.handler.bind(handlerClass);
     * ```
     *
     * @see https://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators
     * @returns {HandlerMethodDecorator}
     */
    injectLambdaContext(options) {
        return (_target, _propertyKey, descriptor) => {
            /**
             * The descriptor.value is the method this decorator decorates, it cannot be undefined.
             */
            /* eslint-disable  @typescript-eslint/no-non-null-assertion */
            const originalMethod = descriptor.value;
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const loggerRef = this;
            // Use a function() {} instead of an () => {} arrow function so that we can
            // access `myClass` as `this` in a decorated `myClass.myMethod()`.
            descriptor.value = async function (event, context, callback) {
                let initialPersistentAttributes = {};
                if (options && options.clearState === true) {
                    initialPersistentAttributes = {
                        ...loggerRef.getPersistentLogAttributes(),
                    };
                }
                Logger.injectLambdaContextBefore(loggerRef, event, context, options);
                let result;
                try {
                    result = await originalMethod.apply(this, [event, context, callback]);
                }
                catch (error) {
                    throw error;
                }
                finally {
                    Logger.injectLambdaContextAfterOrOnError(loggerRef, initialPersistentAttributes, options);
                }
                return result;
            };
        };
    }
    static injectLambdaContextAfterOrOnError(logger, initialPersistentAttributes, options) {
        if (options && options.clearState === true) {
            logger.setPersistentLogAttributes(initialPersistentAttributes);
        }
    }
    static injectLambdaContextBefore(logger, event, context, options) {
        logger.addContext(context);
        let shouldLogEvent = undefined;
        if (options && options.hasOwnProperty('logEvent')) {
            shouldLogEvent = options.logEvent;
        }
        logger.logEventIfEnabled(event, shouldLogEvent);
    }
    /**
     * Logs a Lambda invocation event, if it *should*.
     *
     ** @param {unknown} event
     * @param {boolean} [overwriteValue]
     * @returns {void}
     */
    logEventIfEnabled(event, overwriteValue) {
        if (!this.shouldLogEvent(overwriteValue))
            return;
        this.info('Lambda invocation event', { event });
    }
    /**
     * This method allows recalculating the initial sampling decision for changing
     * the log level to DEBUG based on a sample rate value used during initialization,
     * potentially yielding a different outcome.
     *
     * @returns {void}
     */
    refreshSampleRateCalculation() {
        this.setInitialSampleRate(this.powertoolsLogData.sampleRateValue);
    }
    /**
     * Alias for removePersistentLogAttributes.
     *
     * @param {string[]} keys
     * @returns {void}
     */
    removeKeys(keys) {
        this.removePersistentLogAttributes(keys);
    }
    /**
     * It removes attributes based on provided keys to all log items generated by this Logger instance.
     *
     * @param {string[]} keys
     * @returns {void}
     */
    removePersistentLogAttributes(keys) {
        for (const key of keys) {
            if (this.persistentLogAttributes && key in this.persistentLogAttributes) {
                delete this.persistentLogAttributes[key];
            }
        }
    }
    /**
     * Set the log level for this Logger instance.
     *
     * If the log level is set using AWS Lambda Advanced Logging Controls, it sets it
     * instead of the given log level to avoid data loss.
     *
     * @param logLevel The log level to set, i.e. `error`, `warn`, `info`, `debug`, etc.
     */
    setLogLevel(logLevel) {
        if (this.awsLogLevelShortCircuit(logLevel))
            return;
        if (this.isValidLogLevel(logLevel)) {
            this.logLevel = this.logLevelThresholds[logLevel];
        }
        else {
            throw new Error(`Invalid log level: ${logLevel}`);
        }
    }
    /**
     * It sets the given attributes (key-value pairs) to all log items generated by this Logger instance.
     * Note: this replaces the pre-existing value.
     *
     * @param {LogAttributes} attributes
     * @returns {void}
     */
    setPersistentLogAttributes(attributes) {
        this.persistentLogAttributes = attributes;
    }
    /**
     * It checks whether the current Lambda invocation event should be printed in the logs or not.
     *
     * @private
     * @param {boolean} [overwriteValue]
     * @returns {boolean}
     */
    shouldLogEvent(overwriteValue) {
        if (typeof overwriteValue === 'boolean') {
            return overwriteValue;
        }
        return this.getLogEvent();
    }
    /**
     * It prints a log item with level WARN.
     *
     * @param {LogItemMessage} input
     * @param {Error | LogAttributes | string} extraInput
     * @returns {void}
     */
    warn(input, ...extraInput) {
        this.processLogItem(16, input, extraInput);
    }
    /**
     * Factory method for instantiating logger instances. Used by `createChild` method.
     * Important for customization and subclassing. It allows subclasses, like `MyOwnLogger`,
     * to override its behavior while keeping the main business logic in `createChild` intact.
     *
     * @example
     * ```typescript
     * // MyOwnLogger subclass
     * class MyOwnLogger extends Logger {
     *   protected createLogger(options?: ConstructorOptions): MyOwnLogger {
     *     return new MyOwnLogger(options);
     *   }
     *   // No need to re-implement business logic from `createChild` and keep track on changes
     *   public createChild(options?: ConstructorOptions): MyOwnLogger {
     *     return super.createChild(options) as MyOwnLogger;
     *   }
     * }
     * ```
     *
     * @param {ConstructorOptions} [options] Logger configuration options.
     * @returns {Logger} A new logger instance.
     */
    createLogger(options) {
        return new Logger(options);
    }
    /**
     * It stores information that is printed in all log items.
     *
     * @param {Partial<PowertoolsLogData>} attributes
     * @private
     * @returns {void}
     */
    addToPowertoolsLogData(attributes) {
        merge(this.powertoolsLogData, attributes);
    }
    awsLogLevelShortCircuit(selectedLogLevel) {
        const awsLogLevel = this.getEnvVarsService().getAwsLogLevel();
        if (this.isValidLogLevel(awsLogLevel)) {
            this.logLevel = this.logLevelThresholds[awsLogLevel];
            if (this.isValidLogLevel(selectedLogLevel) &&
                this.logLevel > this.logLevelThresholds[selectedLogLevel]) {
                this.warn(`Current log level (${selectedLogLevel}) does not match AWS Lambda Advanced Logging Controls minimum log level (${awsLogLevel}). This can lead to data loss, consider adjusting them.`);
            }
            return true;
        }
        return false;
    }
    /**
     * Create a log item and populate it with the given log level, input, and extra input.
     *
     * We start with creating an object with base attributes managed by Powertools.
     * Then we create a second object with persistent attributes provided by customers either
     * directly to the log entry or through initial configuration and `appendKeys` method.
     *
     * Once we have the two objects, we pass them to the formatter that will apply the desired
     * formatting to the log item.
     *
     * @param logLevel The log level of the log item to be printed
     * @param input The main input of the log item, this can be a string or an object with additional attributes
     * @param extraInput Additional attributes to be added to the log item
     */
    createAndPopulateLogItem(logLevel, input, extraInput) {
        let message = '';
        let otherInput = {};
        if (typeof input === 'string') {
            message = input;
        }
        else {
            const { message: inputMessage, ...rest } = input;
            message = inputMessage;
            otherInput = rest;
        }
        // create base attributes
        const unformattedBaseAttributes = {
            logLevel: this.getLogLevelNameFromNumber(logLevel),
            timestamp: new Date(),
            message,
            xRayTraceId: this.envVarsService.getXrayTraceId(),
            ...this.getPowertoolsLogData(),
        };
        // gradually merge additional attributes starting from customer-provided persistent attributes
        let additionalLogAttributes = { ...this.getPersistentLogAttributes() };
        // if the main input is not a string, then it's an object with additional attributes, so we merge it
        additionalLogAttributes = merge(additionalLogAttributes, otherInput);
        // then we merge the extra input attributes (if any)
        for (const item of extraInput) {
            const attributes = item instanceof Error
                ? { error: item }
                : typeof item === 'string'
                    ? { extra: item }
                    : item;
            additionalLogAttributes = merge(additionalLogAttributes, attributes);
        }
        return this.getLogFormatter().formatAttributes(unformattedBaseAttributes, additionalLogAttributes);
    }
    /**
     * It returns the custom config service, an abstraction used to fetch environment variables.
     *
     * @private
     * @returns {ConfigServiceInterface | undefined}
     */
    getCustomConfigService() {
        return this.customConfigService;
    }
    /**
     * It returns the instance of a service that fetches environment variables.
     *
     * @private
     * @returns {EnvironmentVariablesService}
     */
    getEnvVarsService() {
        return this.envVarsService;
    }
    /**
     * It returns the instance of a service that formats the structure of a
     * log item's keys and values in the desired way.
     *
     * @private
     * @returns {LogFormatterInterface}
     */
    getLogFormatter() {
        return this.logFormatter;
    }
    /**
     * Get the log level name from the log level number.
     *
     * For example, if the log level is 16, it will return 'WARN'.
     *
     * @param logLevel - The log level to get the name of
     * @returns - The name of the log level
     */
    getLogLevelNameFromNumber(logLevel) {
        let found;
        for (const [key, value] of Object.entries(this.logLevelThresholds)) {
            if (value === logLevel) {
                found = key;
                break;
            }
        }
        return found;
    }
    /**
     * It returns information that will be added in all log item by
     * this Logger instance (different from user-provided persistent attributes).
     *
     * @private
     * @returns {LogAttributes}
     */
    getPowertoolsLogData() {
        return this.powertoolsLogData;
    }
    /**
     * When the data added in the log item contains object references or BigInt values,
     * `JSON.stringify()` can't handle them and instead throws errors:
     * `TypeError: cyclic object value` or `TypeError: Do not know how to serialize a BigInt`.
     * To mitigate these issues, this method will find and remove all cyclic references and convert BigInt values to strings.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#exceptions
     * @private
     */
    getReplacer() {
        const references = new WeakSet();
        return (key, value) => {
            let item = value;
            if (item instanceof Error) {
                item = this.getLogFormatter().formatError(item);
            }
            if (typeof item === 'bigint') {
                return item.toString();
            }
            if (typeof item === 'object' && value !== null) {
                if (references.has(item)) {
                    return;
                }
                references.add(item);
            }
            return item;
        };
    }
    /**
     * It returns true and type guards the log level if a given log level is valid.
     *
     * @param {LogLevel} logLevel
     * @private
     * @returns {boolean}
     */
    isValidLogLevel(logLevel) {
        return typeof logLevel === 'string' && logLevel in this.logLevelThresholds;
    }
    /**
     * It returns true and type guards the sample rate value if a given value is valid.
     *
     * @param sampleRateValue
     * @private
     * @returns {boolean}
     */
    isValidSampleRate(sampleRateValue) {
        return (typeof sampleRateValue === 'number' &&
            0 <= sampleRateValue &&
            sampleRateValue <= 1);
    }
    /**
     * It prints a given log with given log level.
     *
     * @param {number} logLevel
     * @param {LogItem} log
     * @private
     */
    printLog(logLevel, log) {
        log.prepareForPrint();
        const consoleMethod = logLevel === 24
            ? 'error'
            : this.getLogLevelNameFromNumber(logLevel).toLowerCase();
        this.console[consoleMethod](JSON.stringify(log.getAttributes(), this.getReplacer(), this.logIndentation));
    }
    /**
     * It prints a given log with given log level.
     *
     * @param {number} logLevel
     * @param {LogItemMessage} input
     * @param {LogItemExtraInput} extraInput
     * @private
     */
    processLogItem(logLevel, input, extraInput) {
        if (logLevel >= this.logLevel) {
            if (__classPrivateFieldGet(this, _Logger_isInitialized, "f")) {
                this.printLog(logLevel, this.createAndPopulateLogItem(logLevel, input, extraInput));
            }
            else {
                __classPrivateFieldGet(this, _Logger_buffer, "f").push([logLevel, [logLevel, input, extraInput]]);
            }
        }
    }
    /**
     * It initializes console property as an instance of the internal version of Console() class (PR #748)
     * or as the global node console if the `POWERTOOLS_DEV' env variable is set and has truthy value.
     *
     * @private
     * @returns {void}
     */
    setConsole() {
        if (!this.getEnvVarsService().isDevMode()) {
            this.console = new Console({
                stdout: process.stdout,
                stderr: process.stderr,
            });
        }
        else {
            this.console = console;
        }
    }
    /**
     * Sets the Logger's customer config service instance, which will be used
     * to fetch environment variables.
     *
     * @private
     * @param {ConfigServiceInterface} customConfigService
     * @returns {void}
     */
    setCustomConfigService(customConfigService) {
        this.customConfigService = customConfigService
            ? customConfigService
            : undefined;
    }
    /**
     * Sets the initial Logger log level based on the following order:
     * 1. If a log level is set using AWS Lambda Advanced Logging Controls, it sets it.
     * 2. If a log level is passed to the constructor, it sets it.
     * 3. If a log level is set via custom config service, it sets it.
     * 4. If a log level is set via env variables, it sets it.
     *
     * If none of the above is true, the default log level applies (`INFO`).
     *
     * @private
     * @param {LogLevel} [logLevel] - Log level passed to the constructor
     */
    setInitialLogLevel(logLevel) {
        const constructorLogLevel = logLevel?.toUpperCase();
        if (this.awsLogLevelShortCircuit(constructorLogLevel))
            return;
        if (this.isValidLogLevel(constructorLogLevel)) {
            this.logLevel = this.logLevelThresholds[constructorLogLevel];
            return;
        }
        const customConfigValue = this.getCustomConfigService()
            ?.getLogLevel()
            ?.toUpperCase();
        if (this.isValidLogLevel(customConfigValue)) {
            this.logLevel = this.logLevelThresholds[customConfigValue];
            return;
        }
        const envVarsValue = this.getEnvVarsService()?.getLogLevel()?.toUpperCase();
        if (this.isValidLogLevel(envVarsValue)) {
            this.logLevel = this.logLevelThresholds[envVarsValue];
            return;
        }
    }
    /**
     * It sets sample rate value with the following prioprity:
     * 1. Constructor value
     * 2. Custom config service value
     * 3. Environment variable value
     * 4. Default value (zero)
     *
     * @private
     * @param {number} [sampleRateValue]
     * @returns {void}
     */
    setInitialSampleRate(sampleRateValue) {
        this.powertoolsLogData.sampleRateValue = 0;
        const constructorValue = sampleRateValue;
        const customConfigValue = this.getCustomConfigService()?.getSampleRateValue();
        const envVarsValue = this.getEnvVarsService().getSampleRateValue();
        for (const value of [constructorValue, customConfigValue, envVarsValue]) {
            if (this.isValidSampleRate(value)) {
                this.powertoolsLogData.sampleRateValue = value;
                if (value && randomInt(0, 100) / 100 <= value) {
                    this.setLogLevel('DEBUG');
                    this.debug('Setting log level to DEBUG due to sampling rate');
                }
                return;
            }
        }
    }
    /**
     * If the log event feature is enabled via env variable, it sets a property that tracks whether
     * the event passed to the Lambda function handler should be logged or not.
     *
     * @private
     * @returns {void}
     */
    setLogEvent() {
        if (this.getEnvVarsService().getLogEvent()) {
            this.logEvent = true;
        }
    }
    /**
     * It sets the log formatter instance, in charge of giving a custom format
     * to the structured logs
     *
     * @private
     * @param {LogFormatterInterface} logFormatter
     * @returns {void}
     */
    setLogFormatter(logFormatter) {
        this.logFormatter =
            logFormatter ??
                new PowertoolsLogFormatter({ envVarsService: this.getEnvVarsService() });
    }
    /**
     * If the `POWERTOOLS_DEV` env variable is set,
     * it adds JSON indentation for pretty printing logs.
     *
     * @private
     * @returns {void}
     */
    setLogIndentation() {
        if (this.getEnvVarsService().isDevMode()) {
            this.logIndentation = LogJsonIndent.PRETTY;
        }
    }
    /**
     * It configures the Logger instance settings that will affect the Logger's behaviour
     * and the content of all logs.
     *
     * @private
     * @param options Options to configure the Logger instance
     */
    setOptions(options) {
        const { logLevel, serviceName, sampleRateValue, logFormatter, persistentLogAttributes, environment, } = options;
        // configurations that affect log content
        this.setPowertoolsLogData(serviceName, environment);
        this.addPersistentLogAttributes(persistentLogAttributes);
        // configurations that affect Logger behavior
        this.setLogEvent();
        this.setInitialLogLevel(logLevel);
        this.setInitialSampleRate(sampleRateValue);
        // configurations that affect how logs are printed
        this.setLogFormatter(logFormatter);
        this.setConsole();
        this.setLogIndentation();
        return this;
    }
    /**
     * It adds important data to the Logger instance that will affect the content of all logs.
     *
     * @param {string} serviceName
     * @param {Environment} environment
     * @param {LogAttributes} persistentLogAttributes
     * @private
     * @returns {void}
     */
    setPowertoolsLogData(serviceName, environment, persistentLogAttributes = {}) {
        this.addToPowertoolsLogData({
            awsRegion: this.getEnvVarsService().getAwsRegion(),
            environment: environment ||
                this.getCustomConfigService()?.getCurrentEnvironment() ||
                this.getEnvVarsService().getCurrentEnvironment(),
            serviceName: serviceName ||
                this.getCustomConfigService()?.getServiceName() ||
                this.getEnvVarsService().getServiceName() ||
                this.getDefaultServiceName(),
        });
        this.addPersistentLogAttributes(persistentLogAttributes);
    }
}
_Logger_buffer = new WeakMap(), _Logger_isInitialized = new WeakMap();
export { Logger };
