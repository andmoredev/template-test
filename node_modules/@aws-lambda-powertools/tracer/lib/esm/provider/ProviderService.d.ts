import type { Namespace } from 'cls-hooked';
import type { ProviderServiceInterface, ContextMissingStrategy } from '../types/ProviderService.js';
import type { Segment, Subsegment } from 'aws-xray-sdk-core';
declare class ProviderService implements ProviderServiceInterface {
    captureAWS<T>(awssdk: T): T;
    captureAWSClient<T>(service: T): T;
    captureAWSv3Client<T>(service: T): T;
    captureAsyncFunc(name: string, fcn: (subsegment?: Subsegment) => unknown, _parent?: Segment | Subsegment): unknown;
    captureFunc(name: string, fcn: (subsegment?: Subsegment) => unknown, _parent?: Segment | Subsegment): unknown;
    captureHTTPsGlobal(): void;
    getNamespace(): Namespace;
    getSegment(): Segment | Subsegment | undefined;
    /**
     * Instrument `fetch` requests with AWS X-Ray
     *
     * The instrumentation is done by subscribing to the `undici` events. When a request is created,
     * a new subsegment is created with the hostname of the request.
     *
     * Then, when the headers are received, the subsegment is updated with the request and response details.
     *
     * Finally, when the request is completed, the subsegment is closed.
     *
     * @see {@link https://nodejs.org/api/diagnostics_channel.html#diagnostics_channel_channel_publish | Diagnostics Channel - Node.js Documentation}
     */
    instrumentFetch(): void;
    putAnnotation(key: string, value: string | number | boolean): void;
    putMetadata(key: string, value: unknown, namespace?: string): void;
    setContextMissingStrategy(strategy: ContextMissingStrategy): void;
    setDaemonAddress(address: string): void;
    setLogger(logObj: unknown): void;
    setSegment(segment: Segment | Subsegment): void;
}
export { ProviderService };
//# sourceMappingURL=ProviderService.d.ts.map